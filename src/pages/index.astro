---
import List from '../components/list.astro'
import { getChannelInfo } from '../lib/telegram'

const pageSize = Astro.locals?.config?.content?.maxPostsPerPage ?? 20

// 首页等价于 currentPage = 1
const offset = 0
const target = pageSize

let cursor: string | undefined = undefined
let tries = 0

const seen = new Set<string>()
const dedup: any[] = []
while (dedup.length < target && tries < 30) {
  const batch = await getChannelInfo(Astro, { before: cursor, raw: true })
  const posts = batch?.posts || []
  if (posts.length === 0) break
  for (const p of posts) {
    const id = String(p?.id ?? '')
    if (!id || seen.has(id)) continue
    seen.add(id)
    dedup.push(p)
    if (dedup.length >= target) break
  }
  cursor = batch.lastId || batch.beforeId || posts?.[0]?.id
  tries++
}

const display = dedup.slice(offset, target)
let channel = await getChannelInfo(Astro)
channel = { ...channel, posts: display }

let hasNext = dedup.length > target
let probeId = cursor
let probeTries = 0
while (!hasNext && probeId && probeTries < 3) {
  const nextBatch = await getChannelInfo(Astro, { before: probeId, raw: true })
  if ((nextBatch?.posts?.length || 0) > 0) {
    hasNext = true
    break
  }
  const morePosts = nextBatch?.posts || []
  probeId = nextBatch.lastId || nextBatch.beforeId || morePosts?.[0]?.id
  probeTries++
}
---

<List channel={channel} currentPage={1} hasNext={hasNext} />
