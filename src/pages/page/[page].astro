---
import List from '../../components/list.astro'
import { getChannelInfo } from '../../lib/telegram'

const cfg = Astro.locals.config
const pageSize = cfg?.content?.maxPostsPerPage ?? 20

const pageParam = parseInt(Astro.params.page || '1', 10)
const currentPage = Number.isFinite(pageParam) && pageParam > 0 ? pageParam : 1

// 目标聚合数量 = offset + pageSize
const offset = (currentPage - 1) * pageSize
const target = offset + pageSize

let cursor: string | undefined = undefined
let tries = 0

// 累积去重，直到达到 target 或尝试上限
const seen = new Set<string>()
const dedup: any[] = []
while (dedup.length < target && tries < 30) {
  const batch = await getChannelInfo(Astro, { before: cursor, raw: true })
  const posts = batch?.posts || []
  if (posts.length === 0) break
  for (const p of posts) {
    const id = String(p?.id ?? '')
    if (!id || seen.has(id)) continue
    seen.add(id)
    dedup.push(p)
    if (dedup.length >= target) break
  }
  cursor = batch.lastId || batch.beforeId || posts?.[0]?.id
  tries++
}

// 切片输出当前页
const display = dedup.slice(offset, target)
let channel = await getChannelInfo(Astro)
channel = { ...channel, posts: display }

// 探测是否还有下一页
let hasNext = dedup.length > target
let probeId = cursor
let probeTries = 0
while (!hasNext && probeId && probeTries < 3) {
  const nextBatch = await getChannelInfo(Astro, { before: probeId, raw: true })
  if ((nextBatch?.posts?.length || 0) > 0) {
    hasNext = true
    break
  }
  const morePosts = nextBatch?.posts || []
  probeId = nextBatch.lastId || nextBatch.beforeId || morePosts?.[0]?.id
  probeTries++
}
---

<List channel={channel} currentPage={currentPage} hasNext={hasNext} />